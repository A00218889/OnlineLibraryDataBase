@page "/books"
@using OnlineLibrary.Data
@inject NavigationManager NavigationManager;
@inject Data.BookService BookService;
@inject IJSRuntime JsRuntime;

<h3>Books</h3>

<small>Add as many books as you want.</small>
<div class="form-group">
    <a href="/Books/Add/" class="btn btn-success"><i class="oi oi-plus"></i> Add Book</a>
</div>
<br>

@if (_book == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (_book.Count == 0)
{
    <p>No Records Found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Book Id</th>
                <th>Name</th>
                <th>Page Count</th>
                <th>Author</th>
                <th>Genre</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in _book)
            {
            <tr>
                <td>
                    <a href="/Books/View/@book.BookId">@book.BookId</a>
                </td>
                <td>@book.BookName</td>
                <td>@book.Pagecount</td>
                <td>@book.Author</td>
                <td>@book.BookGenre</td>
                <td>
                    <button class="btn btn-danger"
                            @onclick="@(e => RemoveBook(@book.BookId))">
                        Remove
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Data.Book> _book = new List<Data.Book>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshBooks();
    }

    private async Task RefreshBooks()
    {
        _book = await BookService.GetBooksAsync();
    }

    private async Task RemoveBook(int bookId)
    {
        var confirmation = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this book?");

        if (confirmation)
        {
            await BookService.RemoveBookAsync(bookId);
            await RefreshBooks();
        }
    }

}