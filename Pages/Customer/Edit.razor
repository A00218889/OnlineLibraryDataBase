@page "/Books/Edit/{BookId:int}"
@inject NavigationManager NavigationManager;
@inject Data.CustomerService CustomerService

<h3>Edit Customer</h3>

<div>
    <hr />
    @if (_customer == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else if (_customer.CustomerId == 0)
    {
        <p>No Records Found.</p>
    }
    else
    {
        <EditForm Model="@_customer" OnValidSubmit="@HandleValidSubmit">

            <dl class="row">

                <dt class="col-sm-2">
                    Customer ID
                </dt>
                <dd class="col-sm-10">
                    @_customer.CustomerId
                </dd>

                <dt class="col-sm-2">
                    First Name
                </dt>
                <dd class="col-sm-10">
                    <InputText id="FirstName" @bind-Value="_customer.FirstName" /> <ValidationMessage For="@(() => _customer.FirstName)" />
                </dd>

                <dt class="col-sm-2">
                    Last Name
                </dt>
                <dd class="col-sm-10">
                    <InputText id="LastName" @bind-Value="_customer.LastName" /> <ValidationMessage For="@(() => _customer.LastName)" />
                </dd>

                
                <dt class="col-sm-2">
                   AccessId
                </dt>
                <dd class="col-sm-10">
                    <InputNumber id="AccessId" @bind-Value="_customer.AccessId" /> <ValidationMessage For="@(() => _customer.AccessId)" />
                </dd>

            </dl>

            <button type="submit" class="btn btn-success">Submit</button>
            <DataAnnotationsValidator />
            <ValidationSummary />
        </EditForm>
    }
</div>

<div>
    <a href="/Books/View/@_customer.CustomerId">View</a> |
    <a href="/Books/">Back to List</a>
</div>

@code {

    [Parameter]
    public int CustomerId { get; set; }

    private Data.Customer _customer = new Data.Customer();

    protected override async Task OnInitializedAsync()
    {
        await RefreshCustomer(CustomerId);
    }

    private async Task RefreshCustomer(int customerId)
    {
        _customer = await CustomerService.GetCustomerAsync(CustomerId);
    }

    private async Task HandleValidSubmit()
    {
        await CustomerService.UpdateCustomerAsync(_customer);
        NavigationManager.NavigateTo($"/Customers/View/{CustomerId}");
    }

}