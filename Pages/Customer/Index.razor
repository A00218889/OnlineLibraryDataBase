@page "/customers"
@using OnlineLibrary.Data
@inject NavigationManager NavigationManager;
@inject Data.CustomerService CustomerService;
@inject IJSRuntime JsRuntime;

<h3>Customers</h3>

<small>Add as many customers as you want.</small>
<div class="form-group">
    <a href="/Customers/Add/" class="btn btn-success"><i class="oi oi-plus"></i> Add Customer</a>
</div>
<br>

@if (_customer == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (_customer.Count == 0)
{
    <p>No Records Found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Customer Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Access Id</th>
                 <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in _customer)
            {
            <tr>
                <td>
                    <a href="/Books/View/@customer.CustomerId">@customer.CustomerId</a>
                </td>
                <td>@customer.CustomerId</td>
                <td>@customer.FirstName</td>
                <td>@customer.LastName</td>
                <td>@customer.AccessId</td>
                <td>
                    <button class="btn btn-danger"
                            @onclick="@(e => RemoveCustomer(customer.CustomerId))">
                        Remove
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Data.Customer> _customer = new List<Data.Customer>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshCustomers();
    }

    private async Task RefreshCustomers()
    {
        _customer = await CustomerService.GetCustomersAsync();
    }

    private async Task RemoveCustomer(int customerId)
    {
        var confirmation = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this Customer?");

        if (confirmation)
        {
            await CustomerService.RemoveCustomerAsync(customerId);
            await RefreshCustomers();
        }
    }

}